import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import pandas as pd
import datetime
import os
import matplotlib.pyplot as plt


# List of virtues with descriptions
virtues = {
    "Auctoritas": "Spiritual Authority: The sense of one's social standing, built up through experience, Pietas, and Industria.",
    "Comitas": "Humour: Ease of manner, courtesy, openness, and friendliness.",
    "Clementia": "Mercy: Mildness and gentleness.",
    "Dignitas": "Dignity: A sense of self-worth, personal pride.",
    "Firmitas": "Tenacity: Strength of mind, the ability to stick to one's purpose.",
    "Frugalitas": "Frugalness: Economy and simplicity of style, without being miserly.",
    "Gravitas": "Gravity: A sense of the importance of the matter at hand, responsibility and earnestness.",
    "Honestas": "Respectability: The image that one presents as a respectable member of society.",
    "Humanitas": "Humanity: Refinement, civilization, learning, and being cultured.",
    "Industria": "Industriousness: Hard work.",
    "Pietas": "Dutifulness: More than religious piety; a respect for the natural order socially, politically, and religiously.",
    "Prudentia": "Prudence: Foresight, wisdom, and personal discretion.",
    "Salubritas": "Wholesomeness: Health and cleanliness.",
    "Severitas": "Sternness: Gravity, self-control.",
    "Veritas": "Truthfulness: Honesty in dealing with others.",
    "Abundantia": "Abundance: The ideal of there being enough food and prosperity for all segments of society.",
    "Aequitas": "Equity: Fair dealing both within government and among the people.",
    "Bonus Eventus": "Good fortune: Remembrance of important positive events.",
    "Clementia": "Clemency: Mercy, shown to other nations.",
    "Concordia": "Concord: Harmony among the Roman people, and also between Rome and other nations.",
    "Felicitas": "Happiness: A celebration of the best aspects of Roman society.",
    "Fides": "Confidence: Good faith in all commercial and governmental dealings.",
    "Fortuna": "Fortune: An acknowledgment of positive events.",
    "Genius": "Spirit of Rome: Acknowledgment of the combined spirit of Rome and its people.",
    "Hilaritas": "Mirth: An expression of happy times.",
    "Iustitia": "Justice: As expressed by sensible laws and governance.",
    "Laetitia": "Joy: The celebration of thanksgiving, often of the resolution of crisis.",
    "Liberalitas": "Liberality: Generous giving.",
    "Libertas": "Freedom: A virtue aspired to by all cultures.",
    "Nobilitas": "Nobility: Noble action within the public sphere.",
    "Ops": "Wealth: Acknowledgment of the prosperity of the Roman world.",
    "Patientia": "Patience: The ability to weather storms and crisis.",
    "Pax": "Peace: A celebration of peace among society and between nations.",
    "Pietas": "Piety: People paying honor to the gods.",
    "Providentia": "Providence: The ability of society to survive trials and manifest a greater destiny.",
    "Pudicitia": "Modesty: A public expression that counters accusations of moral corruptness.",
    "Salus": "Safety: Concern for public health and welfare.",
    "Securitas": "Security: Confidence brought by peace and efficient governance.",
    "Spes": "Hope: Especially during times of difficulty.",
    "Uberitas": "Fertility: Particularly concerning agriculture.",
    "Virtus": "Courage: Especially of leaders within society and government."
}

# GUI Setup
root = tk.Tk()
root.title("Virtue Tracker")
frame = tk.Frame(root)
frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

canvas = tk.Canvas(frame)
scrollbar = ttk.Scrollbar(frame, orient="vertical", command=canvas.yview)
scrollable_frame = tk.Frame(canvas)

scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
canvas.configure(yscrollcommand=scrollbar.set)

sliders = {}
justifications = {}

def save_data():
    date_str = datetime.date.today().strftime("%Y-%m-%d")
    data = {virtue: slider.get() for virtue, slider in sliders.items()}
    df = pd.DataFrame([data])

    # Use Documents folder
    save_dir = os.path.expanduser("~/Desktop/VirtueLogs")
    os.makedirs(save_dir, exist_ok=True)

    csv_path = os.path.join(save_dir, f"virtues_{date_str}.csv")
    txt_path = os.path.join(save_dir, f"justifications_{date_str}.txt")

    # Save virtue data
    df.to_csv(csv_path, mode='a', header=not os.path.exists(csv_path), index=False)

    # Save justifications
    with open(txt_path, "w", encoding="utf-8") as f:
        for virtue, justification in justifications.items():
            content = justification.get().strip()
            f.write(f"{virtue}: {content if content else '[No justification provided]'}\n")

    messagebox.showinfo("Data Saved", f"Saved to:\n{csv_path}\n{txt_path}")

def plot_data():
    month_data = {}
    for file in os.listdir():
        if file.startswith("virtues_") and file.endswith(".csv"):
            date_str = file.split("_")[1].split(".")[0]
            date_obj = datetime.datetime.strptime(date_str, "%Y-%m-%d")
            if date_obj.month == datetime.datetime.now().month and date_obj.year == datetime.datetime.now().year:
                df = pd.read_csv(file)
                for virtue in df.columns:
                    if virtue not in month_data:
                        month_data[virtue] = []
                    month_data[virtue].extend(df[virtue].tolist())
    
    for virtue, values in month_data.items():
        plt.plot(values, label=virtue)
    
    plt.title("Virtues Over the Month")
    plt.xlabel("Days")
    plt.ylabel("Scores")
    plt.legend()
    plt.show()


def open_memoire():
    save_dir = os.path.expanduser("~/Desktop/VirtueLogs")
    if not os.path.exists(save_dir):
        messagebox.showwarning("No Data", "No data directory found.")
        return

    files = sorted(
        [f for f in os.listdir(save_dir) if f.startswith("virtues_") and f.endswith(".csv")],
        reverse=True
    )
    if not files:
        messagebox.showwarning("No Data", "No virtue data files found.")
        return

    # Create a popup to select the date
    def load_selected_data():
        selected_file = var.get()
        date_str = selected_file.split("_")[1].split(".")[0]
        csv_path = os.path.join(save_dir, f"virtues_{date_str}.csv")
        txt_path = os.path.join(save_dir, f"justifications_{date_str}.txt")

        try:
            df = pd.read_csv(csv_path)
            scores = df.iloc[0].to_dict()
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load CSV: {e}")
            return

        try:
            with open(txt_path, "r", encoding="utf-8") as f:
                justifications = f.read()
        except FileNotFoundError:
            justifications = "[No justifications found for this date.]"

        display = f"Date: {date_str}\n\nVirtue Scores:\n"
        display += "\n".join([f"{k}: {v}" for k, v in scores.items()])
        display += "\n\nJustifications:\n" + justifications

        # Show all in one big messagebox or text window
        viewer = tk.Toplevel(root)
        viewer.title(f"Memoire - {date_str}")
        text = tk.Text(viewer, wrap=tk.WORD, width=100, height=40)
        text.pack(fill=tk.BOTH, expand=True)
        text.insert(tk.END, display)

    # Popup UI
    popup = tk.Toplevel(root)
    popup.title("Select Date")

    tk.Label(popup, text="Select a saved date:").pack(pady=5)
    var = tk.StringVar(popup)
    var.set(files[0])  # default selection

    dropdown = ttk.Combobox(popup, textvariable=var, values=files, width=40)
    dropdown.pack(pady=5)

    tk.Button(popup, text="Load Data", command=load_selected_data).pack(pady=10)
    
 
# Create sliders and justifications
for index, (virtue, description) in enumerate(virtues.items()):
    label = tk.Label(scrollable_frame, text=f"{virtue}: {description}", wraplength=300, justify="left")
    label.grid(row=index, column=0, sticky="w", padx=10, pady=5)
    
    slider = tk.Scale(scrollable_frame, from_=1, to=5, orient=tk.HORIZONTAL)
    slider.grid(row=index, column=1, padx=10, pady=5)
    sliders[virtue] = slider
    
    justification = tk.Entry(scrollable_frame, width=50)
    justification.grid(row=index, column=2, padx=10, pady=5)
    justifications[virtue] = justification

# Buttons
tk.Button(root, text="Save Data", command=save_data).pack(pady=10)
tk.Button(root, text="Show Monthly Statistics", command=plot_data).pack(pady=10)
tk.Button(root, text="Open Memoire", command=open_memoire).pack(pady=10)

root.mainloop()
