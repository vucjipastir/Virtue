import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import pandas as pd
import datetime
import os
import matplotlib.pyplot as plt

# List of virtues with descriptions
virtues = {
    "Auctoritas": "Spiritual Authority: The sense of one's social standing, built up through experience, Pietas, and Industria.",
    "Comitas": "Humour: Ease of manner, courtesy, openness, and friendliness.",
    "Clementia": "Mercy: Mildness and gentleness.",
    "Dignitas": "Dignity: A sense of self-worth, personal pride.",
    "Firmitas": "Tenacity: Strength of mind, the ability to stick to one's purpose.",
    "Frugalitas": "Frugalness: Economy and simplicity of style, without being miserly.",
    "Gravitas": "Gravity: A sense of the importance of the matter at hand, responsibility and earnestness.",
    "Honestas": "Respectability: The image that one presents as a respectable member of society.",
    "Humanitas": "Humanity: Refinement, civilization, learning, and being cultured.",
    "Industria": "Industriousness: Hard work.",
    "Pietas": "Dutifulness: More than religious piety; a respect for the natural order socially, politically, and religiously.",
    "Prudentia": "Prudence: Foresight, wisdom, and personal discretion.",
    "Salubritas": "Wholesomeness: Health and cleanliness.",
    "Severitas": "Sternness: Gravity, self-control.",
    "Veritas": "Truthfulness: Honesty in dealing with others.",
    "Abundantia": "Abundance: The ideal of there being enough food and prosperity for all segments of society.",
    "Aequitas": "Equity: Fair dealing both within government and among the people.",
    "Bonus Eventus": "Good fortune: Remembrance of important positive events.",
    "Clementia": "Clemency: Mercy, shown to other nations.",
    "Concordia": "Concord: Harmony among the Roman people, and also between Rome and other nations.",
    "Felicitas": "Happiness: A celebration of the best aspects of Roman society.",
    "Fides": "Confidence: Good faith in all commercial and governmental dealings.",
    "Fortuna": "Fortune: An acknowledgment of positive events.",
    "Genius": "Spirit of Rome: Acknowledgment of the combined spirit of Rome and its people.",
    "Hilaritas": "Mirth: An expression of happy times.",
    "Iustitia": "Justice: As expressed by sensible laws and governance.",
    "Laetitia": "Joy: The celebration of thanksgiving, often of the resolution of crisis.",
    "Liberalitas": "Liberality: Generous giving.",
    "Libertas": "Freedom: A virtue aspired to by all cultures.",
    "Nobilitas": "Nobility: Noble action within the public sphere.",
    "Ops": "Wealth: Acknowledgment of the prosperity of the Roman world.",
    "Patientia": "Patience: The ability to weather storms and crisis.",
    "Pax": "Peace: A celebration of peace among society and between nations.",
    "Pietas": "Piety: People paying honor to the gods.",
    "Providentia": "Providence: The ability of society to survive trials and manifest a greater destiny.",
    "Pudicitia": "Modesty: A public expression that counters accusations of moral corruptness.",
    "Salus": "Safety: Concern for public health and welfare.",
    "Securitas": "Security: Confidence brought by peace and efficient governance.",
    "Spes": "Hope: Especially during times of difficulty.",
    "Uberitas": "Fertility: Particularly concerning agriculture.",
    "Virtus": "Courage: Especially of leaders within society and government."
}

# Create the main application window
root = tk.Tk()
root.title("Virtue Tracker")

# Create a frame for the sliders with a scrollbar
frame = tk.Frame(root)
frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

canvas = tk.Canvas(frame)
scrollbar = ttk.Scrollbar(frame, orient="vertical", command=canvas.yview)
scrollable_frame = tk.Frame(canvas)

scrollable_frame.bind(
    "<Configure>",
    lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
)

canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

# Add the scrollbar to the canvas
canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
canvas.configure(yscrollcommand=scrollbar.set)

# Dictionary to hold sliders and justification entries
sliders = {}
justifications = {}

# Function to save data
def save_data():
    date_str = datetime.date.today().strftime("%Y-%m-%d")
    data = {virtue: slider.get() for virtue, slider in sliders.items()}
    df = pd.DataFrame([data])
    
    filename = f"virtues_{date_str}.csv"
    df.to_csv(filename, mode='a', header=not os.path.exists(filename), index=False)
    messagebox.showinfo("Data Saved", f"Data saved to {filename}")
    
    # Save justifications to a text file
    with open("justifications.txt", "a") as f:
        for virtue, justification in justifications.items():
            f.write(f"{date_str} - {virtue}: {justification.get()}\n")

# Function to plot data
def plot_data():
    month_data = {}
    
    # Read all CSV files for the current month
    for file in os.listdir():
        if file.startswith("virtues_") and file.endswith(".csv"):
            date_str = file.split("_")[1].split(".")[0]
            date_obj = datetime.datetime.strptime(date_str, "%Y-%m-%d")
            if date_obj.month == datetime.datetime.now().month and date_obj.year == datetime.datetime.now().year:
                df = pd.read_csv(file)
                for virtue in df.columns:
                    if virtue not in month_data:
                        month_data[virtue] = []
                    month_data[virtue].extend(df[virtue].tolist())
    
    # Plot the data
    for virtue, values in month_data.items():
        plt.plot(values, label=virtue)
    
    plt.title("Virtues Over the Month")
    plt.xlabel("Days")
    plt.ylabel("Scores")
    plt.legend()
    plt.show()

# Function to open the justifications file
def open_memoire():
    if os.path.exists("justifications.txt"):
        with open("justifications.txt", "r") as f:
            memoire_content = f.read()
        messagebox.showinfo("Memoire", memoire_content)
    else:
        messagebox.showwarning("Warning", "No memoire file found.")

# Create sliders for each virtue with descriptions and justification entries
for index, (virtue, description) in enumerate(virtues.items()):
    label = tk.Label(scrollable_frame, text=f"{virtue}: {description}", wraplength=300, justify="left")
    label.grid(row=index, column=0, sticky="w", padx=10, pady=5)
    
    slider = tk.Scale(scrollable_frame, from_=1, to=5, orient=tk.HORIZONTAL)
    slider.grid(row=index, column=1, padx=10, pady=5)
    sliders[virtue] = slider
    
    justification = tk.Entry(scrollable_frame, width=50)
    justification.grid(row=index, column=2, padx=10, pady=5)
    justifications[virtue] = justification

# Save button
save_button = tk.Button(root, text="Save Data", command=save_data)
save_button.pack(pady=10)

# Plot button
plot_button = tk.Button(root, text="Show Monthly Statistics", command=plot_data)
plot_button.pack(pady=10)

# Memoire button
memoire_button = tk.Button(root, text="Open Memoire", command=open_memoire)
memoire_button.pack(pady=10)

# Run the application
root.mainloop()
